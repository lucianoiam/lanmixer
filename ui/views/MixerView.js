// SPDX-FileCopyrightText: 2025 Luciano Iam <oss@lucianoiam.com>
// SPDX-License-Identifier: MIT

import { H, useLayoutEffect, useRef, useState } from '../lib/react.js';
import ConditionalScroll from '../widgets/ConditionalScroll.js';
import TrackStripView from './TrackStripView.js';

// Scroller logic generated by GitHub Copilot (GPT-5 Preview) â€“ model: gpt-5-large-preview
const VISIBLE_FRACTION = 0.66;

export default function MixerView({
   tracks,
   className = '',
   style = {}
}) {
   const listRef = useRef();
   const [partial, setPartial] = useState([]);

   const measure = () => {
      const ul = listRef.current;
      const scroller = ul?.parentNode;
      if (!ul || !scroller) return;
      const children = ul.children;
      if (!children.length) return;

      const scrollLeft = scroller.scrollLeft;
      const viewportRight = scrollLeft + scroller.clientWidth;
      const next = new Array(children.length);

      for (let i = 0; i < children.length; ++i) {
         const el = children[i];
         const left = el.offsetLeft;
         const right = left + el.offsetWidth;
         const visibleLeft = Math.max(left, scrollLeft);
         const visibleRight = Math.min(right, viewportRight);
         const visibleWidth = Math.max(0, visibleRight - visibleLeft);
         const fullyVisible = visibleWidth >= el.offsetWidth * VISIBLE_FRACTION;
         next[i] = visibleWidth > 0 && !fullyVisible;
      }

      setPartial(prev => {
         if (prev.length !== next.length) return next;
         for (let i = 0; i < next.length; ++i) {
            if (prev[i] !== next[i]) return next;
         }
         return prev;
      });
   };

   // Single layout effect: initial measure + reactive via ResizeObserver + scroll
   useLayoutEffect(() => {
      const ul = listRef.current;
      const scroller = ul?.parentNode;
      if (!ul || !scroller) return;

      // Initial synchronous measure (after DOM layout, before paint)
      measure();

      // ResizeObserver handles: content width changes, container resize, fonts, etc.
      let ro;
      if (window.ResizeObserver) {
         ro = new ResizeObserver(() => measure());
         ro.observe(scroller);
         ro.observe(ul);
      }

      const onScroll = () => measure();
      scroller.addEventListener('scroll', onScroll, { passive: true });

      return () => {
         scroller.removeEventListener('scroll', onScroll);
         if (ro) ro.disconnect();
      };
   }, [tracks]); // reattach if track list changes

   return H`
      <${ConditionalScroll}
         className="flex flex-row w-full ${className}"
         style="${style}"
      >
         <ul
            ref=${listRef}
            className="contents"
         >
            ${tracks.map((track, i) => H`
               <li>
                  <${TrackStripView}
                     track=${track}
                     className="w-36 ${partial[i] ? 'opacity-25' : ''}"
                  />
               </li>
            `)}
         </ul>
      </${ConditionalScroll}>
   `;
}